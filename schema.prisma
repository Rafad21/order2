// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role { TENANT_ADMIN BOUTIQUE PACKER ACCOUNTING }
enum OrderStatus { SUBMITTED APPROVED DECLINED PACKED SHIPPED }
enum OrgStatus { ACTIVE SUSPENDED }
enum BillingStatus { OK TRIAL PAST_DUE LOCKED }

model Organization {
  id              String         @id @default(cuid())
  slug            String         @unique
  name            String
  domain          String?
  logoUrl         String?
  color           String?
  status          OrgStatus      @default(ACTIVE)
  billingStatus   BillingStatus  @default(OK)
  paywall         Boolean        @default(false)
  plan            String?

  // First-time setup
  setupCode       String?        @unique
  setupCompleted  Boolean        @default(false)

  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  users           Membership[]
  boutiques       Boutique[]
  products        Product[]
  orders          Order[]
}

model Membership {
  id      String @id @default(cuid())
  userId  String
  orgId   String
  role    Role   @default(BOUTIQUE)

  user User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  org  Organization  @relation(fields: [orgId],  references: [id], onDelete: Cascade)

  @@unique([userId, orgId])
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String?
  msTenantId  String?
  msObjectId  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  memberships Membership[]
  orders      Order[] @relation("PlacedOrders")
}

model Boutique {
  id        String   @id @default(cuid())
  orgId     String
  name      String
  code      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  org    Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orders Order[]
}

model Product {
  id        String   @id @default(cuid())
  orgId     String
  sku       String   @unique
  name      String
  price     Decimal  @db.Decimal(12, 2)
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  org    Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  items  OrderItem[]
}

model Order {
  id         String       @id @default(cuid())
  orgId      String
  boutiqueId String
  placedById String
  status     OrderStatus  @default(SUBMITTED)
  total      Decimal      @db.Decimal(12, 2)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  items      OrderItem[]
  org        Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  boutique   Boutique     @relation(fields: [boutiqueId], references: [id])
  placedBy   User         @relation("PlacedOrders", fields: [placedById], references: [id])
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  qty       Int
  price     Decimal @db.Decimal(12, 2)

  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
}

model Setting {
  key       String   @id
  value     String
  updatedAt DateTime @updatedAt
}

model AdminUser {
  id            String   @id @default(cuid())
  email         String   @unique
  passwordHash  String
  name          String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  resets        AdminResetToken[]
}

model AdminResetToken {
  token      String   @id
  adminId    String
  expiresAt  DateTime
  createdAt  DateTime @default(now())

  admin      AdminUser @relation(fields: [adminId], references: [id], onDelete: Cascade)
}
